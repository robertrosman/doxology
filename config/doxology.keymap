/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include "keymap_swedish.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    // combos {
    //     compatible = "zmk,combos";
    //     flash_firmware {
    //         bindings = <&bootloader>;
    //         key-positions = <43 38 39 40 41 42 43 44 45 46 47>;
    //     };
    // };
    /* START input behaviour for trackball */

    tb0_mmv_ibl {
        /* new forked compatible name */

        compatible = "zmk,input-behavior-listener";

        /* the input point device alias */

        device = <&trackball>;

        /* only enable in mouse key layer */

        layers = <1>;

        /* event code value to override raw input event */
        /* designed for switching to mouse scroll, xy-swap, precise-mode+, etc */
        /* NOTE: only apply input-code overriding for INPUT_EV_REL */

        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <1>;

        /* bind a behavior to auto activate MSK layer for &mkp */
        /*Â bindings = <&ib_tog_layer 4>; */
        /* align to CCW 45 degree */
        /* rotate-deg = <315>; */
        /* NOTE 1: This settings do not compitable with y-invert and x-invert */
        /* NOTE 2: Floating point computation requires alot of ram. */
        /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y */
    };

    /* input config for mouse scroll mode on momentary mouse scroll layer */

    tb0_mvsl_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <4>;
        evt-type = <INPUT_EV_REL>;

        /* slienting x-axis with alt event code */

        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;

        /* invert scrolling direction */

        y-invert;

        bindings = <&ib_wheel_scaler 1 50>, <&ib_misc_scaler 0 0>;
    };

    tb0_mhsl_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;

        x-input-code = <INPUT_REL_HWHEEL>;
        y-input-code = <INPUT_REL_MISC>;

        bindings = <&ib_hwheel_scaler 1 50>, <&ib_misc_scaler 0 0>;
    };

    tb0_msl_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;

        x-input-code = <INPUT_REL_HWHEEL>;
        y-input-code = <INPUT_REL_WHEEL>;

        /* invert scrolling direction */

        y-invert;

        bindings = <&ib_wheel_scaler 1 50>, <&ib_hwheel_scaler 1 50>;
    };


    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    ib_misc_scaler: ib_misc_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_MISC>;
    };

    ib_hwheel_scaler: ib_hwheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;
    };

    /* END input behaviour for trackball */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q  &kp W             &kp E         &kp R      &kp T                                               &kp Y          &kp U                 &kp I      &kp O       &kp P         &kp SE_ARNG
&kp BACKSPACE  &kp A  &kp S             &kp D         &kp F      &kp G                                               &kp H          &kp J                 &kp K      &kp L       &kp SE_OUML   &kp SE_AUML
&kp LCTRL      &kp Z  &kp X             &kp C         &kp V      &kp B                                               &kp N          &kp M                 &kp COMMA  &kp PERIOD  &kp SE_MINUS  &kp SE_MINUS
                      &kp LEFT_COMMAND  &kp LEFT_ALT
                                                      &lt 1 ESC  &sk LEFT_SHIFT  &mt LCTRL ENTER    &lt 2 BACKSPACE  &kp SPACE      &sl 3
                                                      &mo 1      &sys_reset                                          &bootloader    &kp LS(LA(LC(LCMD)))
            >;
        };

        numbers {
            bindings = <
&kp LA(TAB)      &trans         &trans            &trans    &trans     &trans                             &kp COMMA        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&kp LA(LS(TAB))  &trans         &mkp RCLK         &mkp MB3  &mkp LCLK  &kp PAUSE_BREAK                    &kp DOT          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans           &kp C_AC_BACK  &kp C_AC_FORWARD  &mo 4     &mo 5      &kp SYSREQ                         &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
                                &trans            &trans
                                                            &trans     &trans           &trans    &trans  &trans           &kp KP_NUMBER_0
                                                            &trans     &bootloader                        &trans           &trans
            >;
        };

        navigation {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans                    &kp C_AC_SCROLL_UP    &kp HOME          &kp UP      &kp END     &kp PAGE_UP        &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans                    &kp C_AC_SCROLL_DOWN  &kp LEFT          &kp DOWN    &kp RIGHT   &kp PAGE_DOWN      &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans                    &kp C_PREVIOUS        &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
                &trans   &trans
                                  &trans   &trans  &trans    &trans  &trans                &trans
                                  &trans   &trans                    &trans                &trans
            >;
        };

        symbols {
            bindings = <
&kp SE_LESS_THAN  &kp SE_EXCLAMATION   &kp SE_DOUBLE_QUOTES  &kp SE_HASH      &kp SE_QUESTION  &kp SE_PERCENT                    &trans            &kp RA(U)          &kp SE_LEFT_PAREN    &kp SE_RIGHT_PAREN    &kp SE_EQUAL        &kp SE_QUESTION
&trans            &kp SE_SINGLE_QUOTE  &kp SE_AT             &kp RA(G)        &kp SE_DOLLAR    &kp RA(G)                         &kp SE_AMPERSAND  &kp SE_LEFT_BRACE  &kp SE_LEFT_BRACKET  &kp SE_RIGHT_BRACKET  &kp SE_RIGHT_BRACE  &kp NON_US_BACKSLASH
&kp RA(U)         &kp SE_PLUS          &kp SE_MINUS          &kp KP_MULTIPLY  &kp KP_DIVIDE    &kp SE_TILDE                      &kp SE_BACKSLASH  &kp SE_GRAVE       &kp SE_LESS_THAN     &kp SE_GREATER_THAN   &kp SE_EQUAL        &kp SE_GRAVE
                                       &trans                &trans
                                                                              &trans           &trans          &trans    &trans  &trans            &trans
                                                                              &trans           &trans                            &trans            &trans
            >;
        };

        pointer_vertical_scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans                    &trans  &trans
            >;
        };

        pointer_horizontal_scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans                    &trans  &trans
            >;
        };

        pointer_all_scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans                    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        scroll_all {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};
