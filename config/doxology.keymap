/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "keymap_swedish.h"

/ {
    // combos {
    //     compatible = "zmk,combos";

    //     flash_firmware {
    //         bindings = <&bootloader>;
    //         key-positions = <43 38 39 40 41 42 43 44 45 46 47>;
    //     };
    // };

    /* START input behaviour for trackball */
    tb0_mmv_ibl {
            /* new forked compatible name */
            compatible = "zmk,input-behavior-listener";
            
            /* the input point device alias */
            device = <&trackball>;

            /* only enable in mouse key layer */
            layers = <4>;

            /* event code value to override raw input event */
            /* designed for switching to mouse scroll, xy-swap, precise-mode+, etc */
            /* NOTE: only apply input-code overriding for INPUT_EV_REL */
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            scale-multiplier = <1>;
            scale-divisor = <1>;

            /* bind a behavior to auto activate MSK layer for &mkp */
            /* bindings = <&ib_tog_layer 4>; */

            /* align to CCW 45 degree */
            /* rotate-deg = <315>; */
            /* NOTE 1: This settings do not compitable with y-invert and x-invert */
            /* NOTE 2: Floating point computation requires alot of ram. */
            /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y */
    };

    /* input config for mouse scroll mode on momentary mouse scroll layer */
    tb0_msl_ibl {
            compatible = "zmk,input-behavior-listener";
            device = <&trackball>;
            layers = <5>;
            evt-type = <INPUT_EV_REL>;
            
            /* slienting x-axis with alt event code */
            x-input-code = <INPUT_REL_MISC>;
            y-input-code = <INPUT_REL_WHEEL>;

            /* invert scrolling direction */
            y-invert;

            /* align to CCW 45 degree */
            /* rotate-deg = <315>; */
            /* NOTE 1: This settings do not compitable with y-invert and x-invert */
            /* NOTE 2: Floating point computation requires alot of ram. */
            /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y */

            /* bind a behavior to down scaling input value to (1/8) */
            /* NOTE: This behavior is different to scale-divisor. */
            /*       The delta value is accumlated until result >= 1 after cast. */
            /*       The scrolling is preented in hi-res and allow precise scrolling */
            bindings = <&ib_wheel_scaler 1 8>;
    };

    /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
    ib_tog_layer: ib_tog_layer {
            compatible = "zmk,input-behavior-tog-layer";
            #binding-cells = <1>;
            time-to-live-ms = <1000>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };
    /* END input behaviour for trackball */




    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q    &kp W             &lt 5 E       &kp R      &kp T                                                   &kp Y          &kp U                 &kp I      &kp O       &kp P       &kp SE_ARNG
&kp BACKSPACE  &lt 4 A  &kp S             &kp D         &kp F      &kp G                                                   &kp H          &kp J                 &kp K      &kp L       &kp SE_OUML &kp SE_AUML
&kp LCTRL      &kp Z    &kp X             &kp C         &kp V      &kp B                                                   &kp N          &kp M                 &kp COMMA  &kp PERIOD  &kp MINUS   &kp MINUS 
                        &kp LEFT_COMMAND  &kp LEFT_ALT
                                                        &lt 1 ESC  &sk LEFT_SHIFT  &mt LCTRL RG(ENTER)    &lt 2 BACKSPACE  &kp SPACE      &sl 3
                                                        &mo 4      &kp LCMD                                                &kp RIGHT_ALT  &kp LS(LA(LC(LCMD)))
            >;
        };

        numbers {
            bindings = <
&kp LA(TAB)      &kp F1  &kp F2   &kp F3   &kp F4   &trans                             &kp COMMA        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&kp LA(LS(TAB))  &kp F5  &kp F6   &kp F7   &kp F8   &kp PAUSE_BREAK                    &kp DOT          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans           &kp F9  &kp F10  &kp F11  &kp F12  &kp SYSREQ                         &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
                         &trans   &trans
                                           &trans   &trans           &trans    &trans  &trans           &kp KP_NUMBER_0
                                           &trans   &trans                             &trans           &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &kp C_AC_SCROLL_UP    &kp HOME  &kp UP    &kp END    &kp PAGE_UP    &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp C_AC_SCROLL_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans                &trans    &trans    &trans     &trans         &trans
                &trans  &trans
                                &trans  &trans  &trans    &trans  &trans                &trans
                                &trans  &trans                    &trans                &trans
            >;
        };

        symbols {
            bindings = <
&kp LT        &kp EXCLAMATION   &kp DOUBLE_QUOTES  &kp HASH         &kp QUESTION   &kp PERCENT                    &trans                &kp PIPE   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS     &kp EQUAL        &kp QUESTION
&trans        &kp SINGLE_QUOTE  &kp AT             &kp CARET        &kp DOLLAR     &kp CARET                      &kp AMPS              &kp LBRC   &kp LBKT              &kp RIGHT_BRACKET         &kp RIGHT_BRACE  &kp NON_US_BACKSLASH
&kp LA(PIPE)  &kp PLUS          &kp MINUS          &kp KP_MULTIPLY  &kp KP_DIVIDE  &kp TILDE                      &kp NON_US_BACKSLASH  &kp GRAVE  &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp LA(EQUAL)    &kp LA(EQUAL)
                                &trans             &trans
                                                                    &trans         &trans       &trans    &trans  &trans                &trans
                                                                    &trans         &trans                         &trans                &trans
            >;
        };

        pointer {
            bindings = <
&trans  &trans  &trans     &trans    &trans     &kp C_AC_SCROLL_UP                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MB3  &mkp LCLK  &kp C_AC_SCROLL_DOWN                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans    &trans     &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
                &trans     &trans
                                     &trans     &trans                &trans    &trans  &trans  &trans
                                     &trans     &trans                                  &trans  &trans
            >;
        };

        pointer_scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans                    &trans  &trans
            >;
        };
    };
};
